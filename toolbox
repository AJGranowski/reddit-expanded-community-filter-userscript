#!/bin/sh
## DESCRIPTION
#|   Run commands from Docker images in the current directory using Docker Compose.
##
## HELP
#|   usage: toolbox [-f|--file FILE, -h|--help, -q|--quiet, --dry-run, --quit, --remove-volumes, --service SERVICE, --] commands...
#|     options:
#|       -f, --file          Docker compose configuration files. 
#|       -h, --help          Display this help menu and exit.
#|       -q, --quiet         Suppress output.
#|       --dry-run           Execute without modifying the state. 
#|       --quit              Exit right before starting a Docker container.
#|                             For example, removing the volumes instead of
#|                             renewing them.
#|       --renew-volumes     Remove all Docker volumes created from this service.
#|       --service           The service to run against.
#|       --                  End of options, everything after this will be
#|                             treated as a command.
#|       commands...         A command or command strings to run inside of
#|                             Docker.
##
## Copyright (c) 2023 AJ Granowski
## MIT License
set -pC

exec 3>&1 # fd 3 = stdout
COLOR_RED='\033[0;31m'
COLOR_CLEAR='\033[0m' # No Color

echo_stdout() {
    echo "$@" >&3
}

echo_error() {
    echo "${COLOR_RED}$@${COLOR_CLEAR}" 1>&2
}

o_abort=
o_dry_run=false
o_file=
o_help=false
o_quiet=false
o_quit=false
o_renew_volumes=false
o_service=

# Parse options
while [ $# -gt 0 ]; do
    case $1 in
        -f|--file)
            shift
            # Support nested quote characters
            new_file_argument="--file \"\$(cat <<EOF
$1
EOF
)\""
            if [ -z "$o_file" ]; then
                o_file="$new_file_argument"
            else
                o_file="$o_file $new_file_argument"
            fi
            ;;
        -h|--help)
            o_abort=0
            o_help=true
            ;;
        -q|--quiet)
            exec 1>/dev/null
            o_quiet=true
            ;;
        --dry-run)
            o_dry_run=true
            ;;
        --quit)
            o_quit=true
            ;;
        --renew-volumes)
            o_renew_volumes=true
            ;;
        --service)
            shift
            if [ -z "$o_service" ]; then
                o_service="$1"
            else
                o_service="$o_service\n$1"
            fi
            ;;
        --)
            shift
            break
            ;;
        -*)
            echo_error "Error: Unknown option: $1"
            o_abort=1
            o_help=true
            ;;
        *)
            break
    esac

    shift
done

if $o_help; then
    echo_stdout "$(awk '/^## HELP/{flag=1; next} /^##/{flag=0} flag' "$0" | cut -c 4-)"
fi

if [ -n "$o_abort" ]; then
    exit $o_abort
fi

# Start, or restart docker if not running.
docker version 1>/dev/null 2>&1
if [ $? -ne 0 ]; then
    echo "Starting Docker..."
    service docker status 1>/dev/null 2>&1
    if [ $? -ne 0 ]; then
        sudo service docker start
    else
        sudo service docker restart
    fi

    docker version >/dev/null 2>&1
    while [ $? -ne 0 ]; do
        sleep 1
        docker version 1>/dev/null 2>&1
    done
fi

# Prepare YQ
docker compose --file images/yq/docker-compose.yml build

# Function to parse YAML
yq() {
    docker compose --file images/yq/docker-compose.yml run -i --rm --user "$(id -u)" yq "$@"
}

# Execute compose commands with automatic file arguments
docker_compose() {
    dry_run=
    if $o_dry_run; then
        dry_run="--dry-run"
    fi

    docker compose $dry_run $o_file "$@"
}

# Default $o_service to the services listed in the compose file
if [ -z "$o_service" ]; then
    o_service="$(docker_compose config --services)"
fi

if [ "$(echo "$o_service" | wc -l)" -gt 1 ]; then
    echo_error "Error: More than one service provided:\n$(echo "$o_service" | sed 's/^/    /')"
    exit 1
fi

if $o_renew_volumes; then
    docker_compose down --volumes
fi

COMPOSE_CONFIG="$(docker_compose config)"

# Create host paths listed in the config ourselves since otherwise Docker makes them owned by root.
while read source_path; do
    if [ ! -z "$source_path" -a ! -e "$source_path" ]; then
        mkdir -pv "$source_path"
    fi
done <<EOF
$(/bin/echo "$COMPOSE_CONFIG" | yq e ".services.$o_service.volumes[] | select(.type == \"bind\" and .bind.create_host_path == true) | .source")
EOF

# List files and directories used by the container. Used to fix permissions issues from the image build.
build_touch_list=
build_mkdir_list=
build_chown_list=

# Separately list files and directories from bind mounts.
while read source_path; do
    if [ -z "$source_path" ]; then
        continue
    fi

    target_path="'$(echo "$COMPOSE_CONFIG" | yq e ".services.$o_service.volumes[] | select(.type == \"bind\" and .source == \"$source_path\") | .target")'"
    if [ -f "$source_path" ]; then
        if [ -z "$build_touch_list" ]; then
            build_touch_list="$target_path"
        else
            build_touch_list="$build_touch_list $target_path"
        fi
    else
        if [ -z "$build_mkdir_list" ]; then
            build_mkdir_list="$target_path"
        else
            build_mkdir_list="$build_mkdir_list $target_path"
        fi
    fi

    if [ -z "$build_chown_list" ]; then
        build_chown_list="$target_path"
    else
        build_chown_list="$build_chown_list $target_path"
    fi
done <<EOF
$(/bin/echo "$COMPOSE_CONFIG" | yq e ".services.$o_service.volumes[] | select(.type == \"bind\") | .source")
EOF

# List directories from volume mounts.
while read target_path; do
    if [ -z "$target_path" ]; then
        continue
    fi

    target_path="'$target_path'"
    if [ -z "$build_mkdir_list" ]; then
        build_mkdir_list="$target_path"
    else
        build_mkdir_list="$build_mkdir_list $target_path"
    fi

    if [ -z "$build_chown_list" ]; then
        build_chown_list="$target_path"
    else
        build_chown_list="$build_chown_list $target_path"
    fi
done <<EOF
$(/bin/echo "$COMPOSE_CONFIG" | yq e ".services.$o_service.volumes[] | select(.type == \"volume\") | .target")
EOF

if $o_quit; then
    exit 0
fi

# Execute arguments in a temporary Docker container.
container_exec() {
    quiet=
    if $o_quiet; then
        quiet="--quiet-pull"
    fi

    # Check if rootless
    # https://sthbrx.github.io/blog/2023/04/05/detecting-rootless-docker/
    if  docker info -f '{{println .SecurityOptions}}' | grep 'rootless' 1>/dev/null; then
        (docker_compose build \
            --build-arg "MKDIR_LIST=$build_mkdir_list" \
            --build-arg "TOUCH_LIST=$build_touch_list" \
        )
    else
        (docker_compose build \
            --build-arg "CHOWN_LIST=$build_chown_list" \
            --build-arg "MKDIR_LIST=$build_mkdir_list" \
            --build-arg "TOUCH_LIST=$build_touch_list" \
            --build-arg "USER_ID=$(id -u)" \
            --build-arg "USER_NAME=$(id -un)" \
            --build-arg "USER_GROUP_ID=$(id -g)" \
            --build-arg "USER_GROUP_NAME=$(id -gn)" \
        )
    fi && \
    docker_compose run --rm --service-ports $quiet $o_service "$@" >&3
}

container_exec "$@"