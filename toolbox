#!/bin/sh
## DESCRIPTION
#|   Run commands from Docker images in the current directory.
##
## HELP
#|   usage: toolbox [-f|--file FILE, -h|--help, -q|--quiet, --quit, --remove-volumes, --service SERVICE, --] commands...
#|     options:
#|       -f, --file          Compose configuration files. 
#|       -h, --help          Display this help menu and exit.
#|       -q, --quiet         Suppress output.
#|       --quit              Exit instead of running any commands.
#|       --renew-volumes     Remove all Docker volumes created from this service.
#|       --service           The service to run against.
#|       --                  End of options, everything after this will be
#|                             treated as a command.
#|       commands...         A command or command strings to run inside of
#|                             Docker.
##
## Copyright (c) 2023 AJ Granowski
## MIT License
set -pC

exec 3>&1 # fd 3 = stdout
COLOR_RED='\033[0;31m'
COLOR_CLEAR='\033[0m' # No Color

echo_stdout() {
    echo "$@" >&3
}

echo_error() {
    echo "${COLOR_RED}$@${COLOR_CLEAR}" 1>&2
}

o_abort=
o_file=
o_help=false
o_quit=false
o_renew_volumes=false
o_service=

# Parse options
while [ $# -gt 0 ]; do
    case $1 in
        -f|--file)
            shift
            # Support nested quote characters
            new_file_argument="--file \"\$(cat <<EOF
$1
EOF
)\""
            if [ -z "$o_file" ]; then
                o_file="$new_file_argument"
            else
                o_file="$o_file $new_file_argument"
            fi
            ;;
        -h|--help)
            o_abort=0
            o_help=true
            ;;
        -q|--quiet)
            exec 1>/dev/null
            ;;
        --quit)
            o_quit=true
            ;;
        --renew-volumes)
            o_renew_volumes=true
            ;;
        --service)
            shift
            if [ -z "$o_service" ]; then
                o_service="$1"
            else
                o_service="$o_service\n$1"
            fi
            ;;
        --)
            shift
            break
            ;;
        -*)
            echo_error "Error: Unknown option: $1"
            o_abort=1
            o_help=true
            ;;
        *)
            break
    esac

    shift
done

if $o_help; then
    echo_stdout "$(awk '/^## HELP/{flag=1; next} /^##/{flag=0} flag' "$0" | cut -c 4-)"
fi

if [ -n "$o_abort" ]; then
    exit $o_abort
fi

# Start, or restart docker if not running.
docker version 1>/dev/null 2>&1
if [ $? -ne 0 ]; then
    echo "Starting Docker..."
    service docker status 1>/dev/null 2>&1
    if [ $? -ne 0 ]; then
        sudo service docker start
    else
        sudo service docker restart
    fi

    docker version >/dev/null 2>&1
    while [ $? -ne 0 ]; do
        sleep 1
        docker version 1>/dev/null 2>&1
    done
fi

# Execute compose commands with automatic file arguments
docker_compose() {
    full_command="docker compose $o_file \$(cat <<EOF
$@
EOF
)"
    eval "$full_command"
}

# Default $o_service to the services listed in the compose file
if [ -z "$o_service" ]; then
    o_service="$(docker_compose config --services)"
fi

if [ "$(echo "$o_service" | wc -l)" -gt 1 ]; then
    echo_error "Error: More than one service provided:\n$(echo "$o_service" | sed 's/^/    /')"
    exit 1
fi

if $o_renew_volumes; then
    docker_compose down --volumes
fi

if $o_quit; then
    exit 0
fi

# Execute arguments in a temporary Docker container.
container_exec() {
    full_command="docker_compose run --rm $o_service \$(cat <<EOF
$@
EOF
)"
    eval "$full_command" >&3 || { echo_error "Full command:\n$(echo "$full_command" | sed 's/^/    /')" && false; }
}

container_exec "$@"